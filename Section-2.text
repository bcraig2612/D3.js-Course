*** Understanding SVGs ***
> SVG - Scalable Vector Graphics
    - Draw shapes with computer code
        -- rectangles, circles, ellipses, lines, texts, and paths
    - Markup code similar to HTML
    - Small file size, don't lose any quality if resized

- Google's old "Google" logo used to be a JPEG file that took up 23,000 bytes of memory.
- Google switched to an SVG logo and now only takes up 310 bytes of memory.

> SVG Grid
    - To create an SVG grid, you use the "<svg></svg>" tags. You also use "width" and "height".
    - As usual, the ( 0, 0 ) coordinates of X and Y are in the top left corner of the page.
    - If you draw a RECTANGLE, the top left corner will start in that corner with the coordinates ( 0, 0 )
    - RECTANGLES are defined with "<rect></rect>" and use "x", "y", "width", "height", and "fill".
    - "stroke" is basically a border for shapes, you also use "stroke-width" for width.
    - If you create anything with coordinates that land outside of the SVG grid, nothing will display.
    - If there's edges of coordinates that are outside the grid, the remaining inside the grid will still display.
    - With CIRCLES, the coordinates are from the center of the circle, rather than the top left corner.
    - CIRCLES are defined with "<circle></circle>" and also use "cx" and "cy" instead of "x" and "y" and "r" for radius
    - ELLIPSES are defined with "<ellipse></ellipse>" and use "cx", "cy" as well as "rx" and "ry" for the radius. They work similar to a circle.
    - LINES are defined with "<line></line>" use "x1", "y1", "x2", and "y2". Also have "stroke" for color and "stroke-width" for width.
    - TEXT is defined with "<text></text>" and uses "x" "y" for positioning "font-size" for size "fill" for color.
    - "text-anchor" will align the anchor(coordinate) in the center of the text instead of the top left corner.
    - PATH is defined with "<path>" and can use self closing tags "/>" Below is an example of a path.
    - * Example: *
        <svg width="190" height="160" xmlns="http://www.w3.org/2000/svg">
            <path d="M10 80 C 40 10, 65 10, 95 80 S 150 150, 180 80" stroke="black" fill="transparent"/>
        </svg>

> Adding SVGs with D3

    - D3 Select - use D3 to grab hold of elements on the screen ( d3.select(), d3.selectAll() )

    - D3 Append - how to add SVGs onto your selection
        -- ( 1 ) Select SVG Canvas
           ( 2 ) Append Rectangle
           ( 3 ) Set Rectangle Attributes

            - <svg id="canvas" width="400" height="60"></svg>
            - var svg = d3.select( "#canvas" ) var rect = svg.append( "rect" )

    - D3 Attr - set attributes of SVGs to make them appear on the screen

            -- rect.attr( "x", 25 );
              rect.attr( "y", 0 );
              rect.attr( "width", 150 );
              rect.attr( "height", 60 );
              rect.attr( "fill", "blue" );

    - Method chaining in D3 Example #1

        -- var rect = d3.select( "#canvas" )
            .append( "rect" )
                .attr( "x", 25 )
                .attr( "y", 0 )
                .attr( "width", 150 )
                .attr( "height", 60 )
                .attr( "fill", "blue" );

    - Method chaining in D3 Example #2

        -- var rect = d3.select( "#canvas" ).append( "rect" ).attr( "x", 25 ).attr( "y", 0 ).attr( "width", 150 ).attr( "height", 60 ).attr( "fill", "blue" );

    - It's important to note that by chaining whatever attributes are after another will affect whatever is in front of it.
